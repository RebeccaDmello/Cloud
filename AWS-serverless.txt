Traditional architecture - deploy a web application on top of a single server such as an Amazon EC2 instance.

(Build and deploy apps // Monitor and maintain apps)
serverless architecture -  A serverless architecture is a way to build and run applications and services without having to manage infrastructure. 
Your application still runs on servers, but all the server management is done by AWS.
Developer action in serverless arch => writing custom code and application logic, provision instances

WORKING Serverless -> (event )Incoming requests (https)->  (handler) logic (AWS Lambda Function)-> Backend - Databases (Amazon DynamoDB/data streams)

Building and Deploying Lambda functions
1. write your code
2. deploy to aws lambda
3. Your code is run in response to events

Serverless means 
- No server management
- Flexible scaling
- automated high availability
- no idle capacity

Serverless includes many more than AWS Lambda
- AWS lambda, amazon API Gateway
- DynamoDB, Step Functions, SQS, S3, Kinesis, SNS
- AWS X-Ray, CodeBuild, Third-Party Tools, SAM, CodePipeline, Open Source

pywren is an open source project that allows you to do extremely high throughput computing jobs 
using Lambda as the compute engine behind the scenes.

Which of these reflect best practices for serverless development environments and deployment processes? Select all that apply.
- Give each developer a sandbox env where they can experiement
- Create independent demo env for feature branches
- Automate your build and deploy process
- Leverage deployment and app mgmnt tools within the community

What types of  potential cost savings should you evaluate when comparing serverless vs. server-based design? Select all that apply.
- Reduced cost of idle server capacity
- Benefit of shifting operating engin focus to tasks that better differentiate the business
- Faster time to market

AWS LAMBDA - compute service - Event-driven Architecture
* Allows you to built your own code
- You can use it to run code without provisioning or managing servers
- Lambda runs your code on a high-availability compute infrastructure
Working ::
1. Event Producers - Mobile app, Retail website, Point-of-sale
2. Event router - Question event, Order event, Inventory event = Amazon EventBridge(ingest + filter event using rules to forward them only to the specific consumer service)
3. Event consumers - Warehouse mgmt DB, Financial system, customer service

Lambda Function
- The code you run on AWS Lamdba is called a Lambda function
- Lambda functions are stateless, with no affinity to the underlying infrastructure.
- After you upload your code to AWS Lambda, you can configure an event source, such as an Amazon Simple Storage Service (Amazon S3) event, Amazon DynamoDB stream, Amazon Kinesis stream, or Amazon Simple Notification Service (Amazon SNS) notification
- When the resource changes and an event is initiated, Lambda will run your function and manage the compute resources as needed to keep up with incoming requests.
- Access permissions - defines what services lambda is permitted to interact with.
- Triggering events - specify which events or sources can initiate the function
- Code, Dependencies - provide code and dependencies/libraries necessary to run your code
- Configuration - define the execution parameters, such as memory, timeout and concurrency
***
Which of the following are features of AWS Lambda?
- You can run code without provisioning or managing servers
- It inintiates functions on your behalf in response to events
- It scales automatically
- It provides built-in monitoring and logging

WORKING - AWS Lambda - Invocation models
- Amazon S3 triggers lambda via an asynchronous push
- Amazon API Gateway triggers lambda synchronously
- Amazon SQS triggers lambda via the polling invocation model

Synchronous invocation 
=> Client => Sending events to => lambda function
-> Waits for completion of function execution, client expects immediate response from function
-> API gateway, cognito, cloudformation, alexa, lex, cloudfront
-> No builtin retries

Asynchronous invocation
=> Client => sending events to event queue => lambda function
-> doesn't waits for completion of function execution, client doesn't expects immediate response from function
-> Amazon SNS, S3, EventBridge
-> two builtin retries

Polling invocation
=> Integrate AWS Streaming and queuing based services with no code or server mgmt.
-> depends on event source
-> amazon kinesis, SQS, DynamoDB streams
-> retries based on event source and configuration

Lambda Execution Environment operates in 3 phases
1. INIT Phase -> extension, runtime, function (CONSTRUCTOR)
=> All initialization process has been taken care of in this phase.
extension init - loads all extensions, runtime init - bootstrap runtime, fun init- runs static code. It makes sure all extensions and runtime complete their setup before fun exe. 

2. Invoke  Phase (ACTUAL EXE)
=> lambda invokes function handler. After the func runs to completion, lambda prepares to
handle another func invocation

3. Shutdown Phase (DESTRUCTOR / GARBAGE COLLECTION)
=> Lambda shuts down the runtime, alerts the extensions to let them stop cleanly and then removes the environment. Lambda sends a shutdown event to each extension, which tells the extension that the environment is about to be shut down.

AWS Lambda security and permissions
1. IAM Resource-based policy
- Resource policies grant permissions to invoke the function, whereas the execution role strictly controls what the function can to do within the other AWS service.
2. Resource-based policy
- Resource policies make it easy to grant access to the Lambda function across separate AWS accounts.

What IAM entities must be included in an execution role for a lambda function to interact
with other services, such as DynamoDB?
-> IAM policy that defines the actions that can be taken within DynamoDB
-> Trust policy that grants "AssumeRole" permission to Lambda to act on DynamoDB

Which of these statements describe a resource policy? (Select THREE.)
-> Can give Amazon S3 permission to initiate a Lambda function
-> Can grant access to the Lambda function across AWS accounts
-> Determines who has access to invoke the function

Lambda function terms to their definitions
=> Context object -> This is generated by AWS and provides metadata about the action
=> Handler method -> An entry point that AWS Lambda calls to initiate your lambda funct
=> Event object -> An object with info about the event that initiated the Lambda func

Best purpose for authoring using the AWS management Console?
=> Simple one-function app with no custom libraries and experimentation

AWS SAM? 
=> A framework that simplifies creation and deployment of your serverless apps
=> An extension of AWS CloudFormation
=> AWS SAM is an open-source framework for building serverless applications.
=> Provides shorthand syntax to express functions, APIs, databases and event source mappings
=> AWS SAM just makes it easier to set up the resources commonly needed for serverless applications.

AWS SAM CLI ~ you can install the AWS SAM CLI locally to help test your serverless app, 
validate your AWS SAM templates and streamline your deployments
AWS SAM CLI COMMANDS 
1. init - initializes a serverless app
2. local - runs your app locally
3. validate - validates an AWS SAM template
4. deploy - deploys an AWS SAM app
5. build - 

CloudFormation Template -> Like a house blueprint - you can treat infra as code
AWS SAM CLI -> Tool for local testing and debugging of serverless apps
Deploy -> AWS SAM CLI command for deploying AWS SAM template
AWS SAM Template -> Streamlined CloudFormation Template for serverless apps 

Configuring your lambda functions
- When building and testing a function, you must specify three primary configuration settings:
memory, timeout and concurrency
- Memory ~ you can allocate up to 10 GB of memory to Lambda func
- Timeout ~ timeout value dictates how long a func can run before lambda terminates the lambda function
- Concurrency ~ Concurrency is the number of invocations your function runs at any given moment.
Types of Concurrency
=> Unreserved concurrency - amount of concurrency that is not allocated to any specific set of functions
=> Reserved concurrency - Guarantees the maximum no of concurrent instances for the funct
=> Provisioned concurrency - Initializes a requested no. of runtime environments so that they are prepared to respond immediately to your function's invocations

A developer has been asked to troubleshoot a Lambda function that is in production. They've been told that it runs for 5 minutes and has been asked to reduce its duration to save on billable costs. Which actions should the developer take? (Select THREE.)
- Confirm whether 5 minutes is the typical duration through production monitoring
- Test at higher memory configurations and compare the duration and cost at each confi
- Check whether any unnecessary SDK components are in the deployment package

What are some reasons a developer would set a concurrency limit (or reserve) on a function? (Select THREE.)
- Manage costs
- Regulate hoe long it takes to process a batch of events
- Match the limit with a downstream resource

Which patterns are Lambda invocation models?
->Synchronous, Asynchronous, Polling

Which of these statements describe a resource policy?
- Can grant access to the Lambda function across AWS accounts
- Determines who has access to invoke the function
- Can give Amazon S3 permission to initiate a Lambda function

Which capabilities are features of Lambda?
- Runs code without you provisioning or managing servers
- Scales automatically
- Triggers Lambda functions on your behalf in response to events

Which feature can a developer enable to create a copy of a function for testing?
- Versioning

Producer - create events with all required information
Router - Ingests and filters events using rules
Consumer - Subscribe and are notified when events occur

What is the importance of the IAM execution role?
- Gives your function permissions to interact with other services

Which monitoring tool provides the ability to visualize the components of an application and the flow of API calls?
-> AWS X-Ray

What does an AWS Identity and Access management (IAM) resource based policy control?
-> Permissions to invoke the function

What are the reasons for setting a concurrency limit on a function?
-> Manage costs
-> Match the limit with a downstream resource
-> Regulate how long it takes to process a batch of events

